{"version":3,"sources":["constants.js","clocks/Clock1.js","clocks/Clock2.js","App.js","reportWebVitals.js","index.js","clocks/clock1.module.css"],"names":["months","fetchTime","region","a","fetch","window","location","protocol","then","res","json","datetime","tzIndex","search","Date","substring","pad0","value","toString","padStart","useDateTime","observable","fromApi","useState","dateTime","setDateTime","useEffect","watcher","watch","data","unwatch","timer","setInterval","dateObj","getTime","undefined","clearInterval","Clock1","time","setTime","date","setDate","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","className","styles","clockFace","drawHand","ctx","pos","length","width","beginPath","lineWidth","lineCap","moveTo","rotate","lineTo","stroke","Clock2","setCtx","radius","setRadius","canvasRef","useRef","canvas","current","getContext","center","height","translate","arc","Math","PI","fillStyle","fill","grad","createRadialGradient","addColorStop","strokeStyle","drawFace","font","textBaseline","textAlign","num","ang","fillText","drawNumbers","now","hour","minute","second","amPm","top","drawTime","month","year","left","right","drawDate","id","ref","App","timezones","setTimezones","selectedTimezone","setSelectedTimezone","setFromApi","setObservable","currentRegion","getSelectedTz","useCallback","SWR","mutate","refreshInterval","tzs","fetchTimezones","onChange","event","target","map","tz","type","checked","isFromApi","htmlFor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a3317403.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nexport const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nexport async function fetchTime (region) {\n  const { datetime } = await fetch(`${window.location.protocol}//worldtimeapi.org/api/timezone/${region}`).then(res => res.json())\n  const tzIndex = datetime.search(/(-|\\+)\\d{2}:\\d{2}/)\n  return new Date(datetime.substring(0, tzIndex))\n}\n\nexport function pad0 (value) {\n  return value.toString().padStart(2, '0')\n}\n\nexport function useDateTime (observable, fromApi) {\n  const [dateTime, setDateTime] = useState()\n\n  useEffect(() => {\n    if (observable) {\n      const watcher = observable.watch(({data}) => {\n        if (data) {\n          setDateTime(data)\n        }\n      })\n  \n      return () => {\n        watcher.unwatch()\n      }\n    }\n  }, [observable])\n\n  useEffect(() => {\n    if (!fromApi) {\n      const timer = setInterval(() => {\n        setDateTime(dateObj => dateObj ? new Date(dateObj.getTime() + 1000) : undefined)\n      }, 1000)\n\n      return () => clearInterval(timer)\n    }\n  }, [fromApi])\n\n  return dateTime\n}\n","import { useEffect, useState } from 'react'\nimport { months, pad0, useDateTime } from '../constants'\nimport styles from './clock1.module.css'\n\nexport function Clock1 ({ observable, fromApi }) {\n  const [time, setTime] = useState('')\n  const [date, setDate] = useState('')\n  const dateTime = useDateTime(observable, fromApi)\n\n  useEffect(() => {\n    if (dateTime) {\n        setDate(`${dateTime.getDate()} ${months[dateTime.getMonth()]}, ${dateTime.getFullYear()}`)\n        setTime(`${pad0(dateTime.getHours())}:${pad0(dateTime.getMinutes())}:${pad0(dateTime.getSeconds())}`)\n    }\n  }, [dateTime])\n\n  return (\n    <div className={styles.clockFace}>\n      <span className={styles.time}>{time}</span>\n      <span className={styles.date}>{date}</span>\n    </div>\n  )\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport { useDateTime, months } from \"../constants\";\n\n// Code reference - https://www.w3schools.com/graphics/tryit.asp?filename=trycanvas_clock_start\nfunction drawFace (ctx, radius) {\n  ctx.beginPath()\n  ctx.arc(0, 0, radius, 0, 2*Math.PI)\n  ctx.fillStyle = 'white'\n  ctx.fill()\n  const grad = ctx.createRadialGradient(0,0,radius*0.95, 0,0,radius*1.05)\n  grad.addColorStop(0, '#333')\n  grad.addColorStop(0.5, 'white')\n  grad.addColorStop(1, '#333')\n  ctx.strokeStyle = grad\n  ctx.lineWidth = radius*0.1\n  ctx.stroke()\n  ctx.beginPath()\n  ctx.arc(0, 0, radius*0.1, 0, 2*Math.PI)\n  ctx.fillStyle = '#333'\n  ctx.fill()\n}\n\nfunction drawNumbers (ctx, radius) {\n  ctx.font = radius*0.15 + 'px arial'\n  ctx.textBaseline='middle'\n  ctx.textAlign='center'\n  for(let num = 1; num < 13; num++){\n    const ang = num * Math.PI / 6\n    ctx.rotate(ang)\n    ctx.translate(0, -radius*0.85)\n    ctx.rotate(-ang)\n    ctx.fillText(num.toString(), 0, 0)\n    ctx.rotate(ang)\n    ctx.translate(0, radius*0.85)\n    ctx.rotate(-ang)\n  }\n}\n\nfunction drawTime (now, ctx, radius) {\n  let hour = now.getHours()\n  let minute = now.getMinutes()\n  let second = now.getSeconds()\n  const amPm = hour < 12 ? 'AM' : 'PM'\n  //hour\n  hour=hour%12\n  hour=(hour*Math.PI/6)+\n  (minute*Math.PI/(6*60))+\n  (second*Math.PI/(360*60))\n  drawHand(ctx, hour, radius*0.5, radius*0.07)\n  //minute\n  minute=(minute*Math.PI/30)+(second*Math.PI/(30*60))\n  drawHand(ctx, minute, radius*0.8, radius*0.07)\n  // second\n  second=(second*Math.PI/30)\n  drawHand(ctx, second, radius*0.9, radius*0.02)\n  ctx.font = radius*0.15 + 'px arial'\n  ctx.textBaseline='middle'\n  ctx.textAlign='center'\n  const top = 2 * Math.PI\n  ctx.rotate(top)\n  ctx.translate(0, -radius*0.65)\n  ctx.rotate(-top)\n  ctx.fillStyle = '#ff0000'\n  ctx.fillText(amPm, 0, 0)\n  ctx.rotate(top)\n  ctx.translate(0, radius*0.65)\n  ctx.rotate(-top)\n}\n\nfunction drawHand (ctx, pos, length, width) {\n  ctx.beginPath()\n  ctx.lineWidth = width\n  ctx.lineCap = 'round'\n  ctx.moveTo(0,0)\n  ctx.rotate(pos)\n  ctx.lineTo(0, -length)\n  ctx.stroke()\n  ctx.rotate(-pos)\n}\n\nfunction drawDate (now, ctx, radius) {\n  let date = now.getDate()\n  let month = months[now.getMonth()]\n  let year = now.getFullYear()\n  const left = 3 * Math.PI / 2\n  ctx.rotate(left)\n  ctx.translate(0, -radius*0.45)\n  ctx.rotate(-left)\n  ctx.fillStyle = '#0000ff'\n  ctx.fillText(date + ' ' + month, 0, 0)\n  ctx.rotate(left)\n  ctx.translate(0, radius*0.45)\n  ctx.rotate(-left)\n  const right = Math.PI / 2\n  ctx.rotate(right)\n  ctx.translate(0, -radius*0.45)\n  ctx.rotate(-right)\n  ctx.fillStyle = '#0000ff'\n  ctx.fillText(year.toString(), 0, 0)\n  ctx.rotate(right)\n  ctx.translate(0, radius*0.45)\n  ctx.rotate(-right)\n}\n\nexport function Clock2 ({ observable, fromApi }) {\n  const dateTime = useDateTime(observable, fromApi)\n  const [ctx, setCtx] = useState()\n  const [radius, setRadius] = useState()\n  const canvasRef = useRef()\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext('2d')\n    const center = canvas.height / 2\n    ctx.translate(center, center)\n    const radius = center * 0.9\n    setCtx(ctx)\n    setRadius(radius)\n  }, [canvasRef])\n\n  useEffect(() => {\n    if (dateTime && ctx && radius) {\n      drawFace(ctx, radius)\n      drawNumbers(ctx, radius)\n      drawTime(dateTime, ctx, radius)\n      drawDate(dateTime, ctx, radius)\n    }\n  }, [dateTime, ctx, radius])\n\n  return (\n    <div id=\"clock-face-2\">\n      <canvas ref={canvasRef} id=\"analog-canvas\" width=\"200\" height=\"200\"></canvas>\n    </div>\n  )\n}\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport SWR from 'vanilla-swr'\nimport './App.css';\nimport { Clock1 } from './clocks/Clock1';\nimport { Clock2 } from './clocks/Clock2';\nimport { fetchTime } from './constants';\n\nfunction App() {\n  const [timezones, setTimezones] = useState([])\n  const [selectedTimezone, setSelectedTimezone] = useState('Asia/Kolkata')\n  const [fromApi, setFromApi] = useState(false)\n  const [observable, setObservable] = useState(null)\n\n  // useRef to maintain the updated value of selectedTimezone\n  const currentRegion = useRef(selectedTimezone)\n  useEffect(() => {\n    currentRegion.current = selectedTimezone\n  }, [selectedTimezone])\n  // useCallback with ref to get the same instance of callback\n  const getSelectedTz = useCallback(() => {\n    return currentRegion.current\n  }, [currentRegion])\n\n  // set observable every time getSelectedTz changes\n  useEffect(() => {\n    setObservable(SWR(getSelectedTz, fetchTime))\n  }, [getSelectedTz])\n\n  useEffect(() => { \n    observable?.mutate({\n      refreshInterval: fromApi ? 1000 : 0\n    })\n  }, [selectedTimezone, fromApi, observable])\n\n  useEffect(() => {\n    async function fetchTimezones () {\n      const tzs = await fetch(`${window.location.protocol}//worldtimeapi.org/api/timezone`).then(res => res.json())\n      setTimezones(tzs)\n    }\n    fetchTimezones()\n  }, [])\n\n  function handleTzChange (event) {\n    setSelectedTimezone(event.target.value)\n  }\n\n  function handleApiChange (event) {\n    const isFromApi = event.target.checked\n    setFromApi(isFromApi)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Clock App</h1>\n      </header>\n      <main>\n        <div className=\"picker-container\">\n          <div>\n            <span>Region:</span>\n            <select value={selectedTimezone} onChange={handleTzChange}>\n              {timezones.map(tz => (<option value={tz} key={tz}>{tz}</option>))}\n            </select>\n          </div>\n          <div>\n            <input type=\"checkbox\" id=\"api\" checked={fromApi} onChange={handleApiChange}></input>\n            <label htmlFor=\"api\">Update only via API</label>\n          </div>\n        </div>\n        <div className=\"clocks\">\n          <Clock1 observable={observable} fromApi={fromApi}/>\n          <Clock2 observable={observable} fromApi={fromApi}/>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"clockFace\":\"clock1_clockFace__ykejw\",\"time\":\"clock1_time__12BnR\",\"date\":\"clock1_date__3ttQe\"};"],"sourceRoot":""}